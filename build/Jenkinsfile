pipeline {
    agent any 
    environment {
        AWS_REGION="eu-central-1"
        EKS_ADMIN_ROLE="udacity-eks-admin-role"
        EKS_PROFILE_NAME="udacity-eks"
        CFN_EKS_STACK="eksctl-udacity-cluster"
        CFN_IAM_STACK="udacity-eks-roles-and-permissions"
    }
    stages {
        stage ('Check if EKS Cluster exists') {
          steps {
            script {
              withAWS(credentials: 'aws-default-credentials', region: 'eu-central-1') {
                eksClusterExists = sh(
                  script: 'if aws cloudformation describe-stacks --region ${AWS_REGION} --stack-name ${CFN_EKS_STACK} > /dev/null 2>&1; then echo "true"; else echo "false"; fi',
                  returnStdout: true).trim()
                echo "EKS Cluster found: ${eksClusterExists}"
              }
            }
          }
        }        
        stage('Prepare AWS IAM') {
            when {
                expression { eksClusterExists == 'false' }
            }            
            steps {
                withAWS(credentials: 'aws-default-credentials', region: 'eu-central-1') {
                    dir('scripts') {
                        sh './prepare-iam.sh ${EKS_ADMIN_ROLE} ${EKS_PROFILE_NAME} ${CFN_IAM_STACK}'
                    }
                }
            }
        }
        stage('Install tooling (eksctl, kubectl, ytt)') {
            when {
                expression { eksClusterExists == 'false' }
            }  
            steps {
                withEnv(['JENKINS_BIN=/var/lib/jenkins/bin']) {
                    sh '''
                        export LC_CTYPE=en_US.UTF-8
                        curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz | tar xz -C .
                        mv eksctl $JENKINS_BIN
                        
                        wget -cO - https://github.com/vmware-tanzu/carvel-ytt/releases/download/v0.30.0/ytt-linux-amd64 > ytt
                        chmod +x ./ytt
                        mv ytt $JENKINS_BIN
                        
                        curl -sl https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/$(uname -s | tr '[:upper:]' '[:lower:]')/amd64/kubectl -o kubectl
                        chmod +x ./kubectl
	                    mv kubectl $JENKINS_BIN
                    '''
                }
            }
        }   
        stage('Create EKS Cluster') {
            when {
                expression { eksClusterExists == 'false' }
            }
            steps {
                withEnv(['PATH+EXTRA=/var/lib/jenkins/bin']) {
                    dir('config/eks') {
                        sh '''
                            sleep 5
                            aws sts get-caller-identity
                            
                            echo $PATH
                            
                            eksctl version
                            ytt version
                            
                            ytt -f . > cluster-ytt.yaml
                            cat cluster-ytt.yaml
                            eksctl create cluster -f cluster-ytt.yaml --profile ${EKS_PROFILE_NAME}
                        '''
                    }
                }
            }
        }
        stage('update eks config') {
            steps {
                sh 'aws eks update-kubeconfig --name udacity --profile ${EKS_PROFILE_NAME}'
                sh 'echo "ready to renew jenkins aws credentials. create new jenkins credentials with credentials stored in /var/lib/jenkins/.aws/credentials"'
            }
        }
        stage('Installing Ingress Controller') {
            when {
                expression { eksClusterExists == 'false' }
            }
            steps {
                withEnv(['PATH+EXTRA=/var/lib/jenkins/bin']) {
                    sh '''
                        kubectl apply -f "https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.2/deploy/static/provider/aws/deploy.yaml"
                        echo "waiting for ingress controller to be available"
                        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
                    '''
                }
            }
        }
    }
      
    post {
        failure {
            withAWS(credentials: 'aws-default-credentials', region: 'eu-central-1') {
                withEnv(['PATH+EXTRA=/var/lib/jenkins/bin']) {
                    dir('config/eks') {
                        sh '''
                            echo "There was an error. EKS Resources and IAM Setup will be deleted automatically"
                            
                            aws cloudformation delete-stack --stack-name ${CFN_IAM_STACK}
                            kubectl delete -f "https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.2/deploy/static/provider/aws/deploy.yaml"
                            eksctl delete cluster -f cluster-ytt.yaml --profile ${EKS_PROFILE_NAME}
                        '''
                        
                    }
                }
            }
        }
        success {
            echo 'Successfully created Cluster'
        }
    }
}